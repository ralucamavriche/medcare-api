{
  "openapi": "3.0.3",
  "info": {
    "title": "Medcare API - OpenAPI 3.0",
    "description": "You can find out more about\nSwagger at [https://swagger.io](https://swagger.io).",
    "version": "1.0.11"
  },
  "servers": [
    {
      "url": "http://localhost:5000/v1"
    }
  ],
  "tags": [
    {
      "name": "appointment",
      "description": "Everything about appointments"
    },
    {
      "name": "user",
      "description": "Everything about users"
    },
    {
      "name": "question",
      "description": "Access to questions"
    },
    {
      "name": "feedback",
      "description": "Operations about feedbacks"
    }
  ],
  "paths": {
    "/appointment": {
      "get": {
        "tags": ["appointment"],
        "summary": "Returns all appointments",
        "description": "Returns all appointments",
        "operationId": "getAppointments",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": ["appointment"],
        "summary": "Create a new appointment",
        "description": "Create a new appointment",
        "operationId": "createAppointment",
        "requestBody": {
          "description": "Create a new appointment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Appointment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "403": {
            "description": "Authentication failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/appointment/{appointmentId}": {
      "get": {
        "tags": ["appointment"],
        "summary": "Find appointment by ID",
        "description": "Returns a single appointment",
        "operationId": "getAppointmentById",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "ID of appointment to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Appointment not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": ["write:appointments", "read:appointments"]
          }
        ]
      },
      "patch": {
        "tags": ["appointment"],
        "summary": "Update an existing property for an appointment",
        "description": "Update an existing property for an appointment",
        "operationId": "updateAppoiment",
        "requestBody": {
          "description": "Update an existent appointment",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Appointment"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "description": "ID of appointment to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Appointment not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": ["appointment"],
        "summary": "Deletes a appointment",
        "description": "delete a appointment",
        "operationId": "deleteAppointment",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "appointmentId",
            "in": "path",
            "description": "Appointment id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid appointment value"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Update user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/question": {
      "get": {
        "tags": ["question"],
        "summary": "Returns all questions",
        "description": "Returns all questions",
        "operationId": "getQuestions",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": ["question"],
        "summary": "Create a new question",
        "description": "Create a new question",
        "operationId": "createQuestion",
        "requestBody": {
          "description": "Create a new question",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Question"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "403": {
            "description": "Authentication failed"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/question/{questiontId}": {
      "get": {
        "tags": ["question"],
        "summary": "Find question by ID",
        "description": "Returns a single question",
        "operationId": "getQuestionById",
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of question to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Question not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "patch": {
        "tags": ["question"],
        "summary": "Update an existing property for an question",
        "description": "Update an existing property for an question",
        "operationId": "updateQuestion",
        "requestBody": {
          "description": "Update an existent question",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Question"
              }
            }
          },
          "required": true
        },
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "ID of question to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Question"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Question not found"
          },
          "422": {
            "description": "Validation exception"
          }
        }
      },
      "delete": {
        "tags": ["question"],
        "summary": "Deletes a question",
        "description": "delete a question",
        "operationId": "deleteQuestion",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "questiontId",
            "in": "path",
            "description": "Question id to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid question value"
          },
          "404": {
            "description": "Question not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          }
        }
      },
      "Appointment": {
        "required": ["title", "startDate", "endDate"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string",
            "example": "Meeting with John"
          },
          "description": {
            "type": "string",
            "example": "About the meeting"
          },
          "startDate": {
            "type": "string",
            "example": "About the meeting"
          },
          "endDate": {
            "type": "string",
            "example": "About the meeting"
          },
          "status": {
            "type": "string",
            "description": "Appointment status in the DB",
            "enum": ["available", "pending", "canceled"]
          }
        }
      },
      "Question": {
        "required": ["question", "answer"],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "question": {
            "type": "string",
            "example": "How are you?"
          },
          "answer": {
            "type": "string",
            "example": "I'm good. Thk!"
          },
          "author": {
            "type": "string",
            "description": "Mihaita"
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        }
      },
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    }
  }
}
